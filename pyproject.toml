[tool.poetry]
name = "thesis_work"
version = "0.0.0"
description = "Thesis Work"
readme = "README.md"

authors = [
    "template <template@github.com>",
]
maintainers = [
    "template <template@github.com>",
]

keywords = [
    "template"
]

classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    # "Programming Language :: Python :: 3.8",
    # "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

[tool.poetry.urls]
repository = "https://github.com/ilkersigirci/thesis-work"

[tool.poetry.build]
generate-setup-file = false

[tool.poetry.scripts]
placeholder = "thesis_work.scripts.placeholder:placeholder_script"

[[tool.poetry.source]]
name = "PyPI"
priority = "default"

# poetry source add --priority=supplemental nvidia-pypi https://pypi.nvidia.com/
[[tool.poetry.source]]
name = "nvidia-pypi"
url = "https://pypi.nvidia.com/"
priority = "supplemental"

[tool.poetry.dependencies]
python = "3.10.*"
scikit-learn = "^1.3.0" # Min supported version for HDBSCAN
dagster = "1.4.2"
deepchem = "^2.7.1"
streamlit= "^1.19.0"
py3dmol = "2.0.0.post2"
stmol = "^0.0.9"
ipython-genutils = "^0.2.0" # NOTE: For stmol
matplotlib = "^3.7.1"
regex = "^2022.10.31"
transformers = "4.30.2" # NOTE: Fix for `No module named 'transformers.models.mmbt'`
simpletransformers = "^0.63.11"
wandb = "^0.13.11"
bertviz = "^1.4.0"
# apex = {git = "https://github.com/NVIDIA/apex.git", branch = "master"}
numpy = "1.21.6" # NOTE: Only needed for `chemberta.load_molnet_dataset`
# torch = "^1.13.1" # NOTE: Fix for `ValueError: libcublas.so.*[0-9] not found in the system path`
torch = "2.0.0"
seaborn = "^0.12.2"
umap-learn = {extras = ["plot"], version = "^0.5.3"}
leidenalg = "^0.10.1"
datashader = "^0.15.1"

# Nvidia Rapids Related - Cuda 11
cuml-cu11 = { url = "https://pypi.nvidia.com/cuml-cu11/cuml_cu11-23.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
cudf-cu11 = { url = "https://pypi.nvidia.com/cudf-cu11/cudf_cu11-23.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
dask-cudf-cu11 = { url = "https://pypi.nvidia.com/dask-cudf-cu11/dask_cudf_cu11-23.4.0-py3-none-any.whl" }
raft-dask-cu11 = { url = "https://pypi.nvidia.com/raft-dask-cu11/raft_dask_cu11-23.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
cubinlinker-cu11 = { url = "https://pypi.nvidia.com/cubinlinker-cu11/cubinlinker_cu11-0.3.0.post1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
ptxcompiler-cu11 = { url = "https://pypi.nvidia.com/ptxcompiler-cu11/ptxcompiler_cu11-0.7.0.post1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
rmm-cu11 = { url = "https://pypi.nvidia.com/rmm-cu11/rmm_cu11-23.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
pylibraft-cu11 = { url = "https://pypi.nvidia.com/pylibraft-cu11/pylibraft_cu11-23.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
ucx-py-cu11 = { url = "https://pypi.nvidia.com/ucx-py-cu11/ucx_py_cu11-0.31.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }

# Nvidia Rapids Related - Cuda 12
# cuml-cu12 = { url = "https://pypi.nvidia.com/cuml-cu12/cuml_cu12-23.6.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
# cudf-cu12 = { url = "https://pypi.nvidia.com/cudf-cu12/cudf_cu12-23.6.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
# dask-cudf-cu12 = { url = "https://pypi.nvidia.com/dask-cudf-cu12/dask_cudf_cu12-23.6.0-py3-none-any.whl" }
# raft-dask-cu12 = { url = "https://pypi.nvidia.com/raft-dask-cu12/raft_dask_cu12-23.6.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl" }
# rmm-cu12 = {url = "https://pypi.nvidia.com/rmm-cu12/rmm_cu12-23.6.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"}
# pylibraft-cu12 = {url = "https://pypi.nvidia.com/pylibraft-cu12/pylibraft_cu12-23.6.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"}
# ucx-py-cu12 = {url = "https://pypi.nvidia.com/ucx-py-cu12/ucx_py_cu12-0.32.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl"}
# python-utils = "^3.7.0"
chemprop = "^1.6.1"
mols2grid = "^2.0.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-rerunfailures = "^10.2"
pytest-xdist = {version = "^3.0.0", extras = ["psutil"]}
#pytest-timeout = ""

[tool.poetry.group.doc.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.0.12"
mkdocstrings = {version = "^0.20.0", extras = ["python"]}
# mdx-include = "^1.4.2"
# mkdocs-markdownextradata-plugin = "^0.2.5"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.19.0"
ruff = "0.0.279"
black = {version = "23.1.0", extras = ["d", "jupyter"]}
mypy = "^1.0.0"
scalene = "^1.5.19"
dagster-webserver = "*"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--import-mode=importlib",
    "--color=yes",
    "--verbose",
#    "--durations=0",
#    "--strict-markers",
#    "--doctest-modules",
    # NOTE: cov is not working with pycharm debugger. Enable it later!
#    "--cov thesis_work",
#    "--cov-report=xml",
#    "--cov-report html",
]

testpaths = ["tests"]

# TODO: Make them inherit from yaml file
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)-20s :: %(name)-8s :: %(levelname)-8s :: %(filename)s:%(lineno)d - (%(funcName)s) :: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


[tool.black]
# required-version = "23.1.0"
line-length = 88
color = true
# skip-string-normalization = true
extra-exclude = '''
/(
    \.git
  | _build
  | bert-loves-chemistry
)/
'''

[tool.ruff]
target-version = "py38"
# required-version = "0.0.238"
line-length = 88
select = [
    "E",  # pycodestyle errors (default)
    "F",  # pyflakes (default)
    "W",  # pycodestyle warnings
    "I001",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "Q",  # flake8-quotes
    # "D",  # flake8-docstrings
    "T",  # (disallow print statements) keep debugging statements out of the codebase
    "RUF", # Enable all ruff-specific checks
    # (pylint) use all pylint rules (ruff currently implements only a subset of
    # pylint's rules)
    "PLC",
    "PLE",
    "PLR",
    "PLW",
]
#extend-select = []
respect-gitignore = true
# fix = true
unfixable = [
    "F401" # Unused imports.
]
ignore-init-module-imports = true
# ignore = []
extend-ignore = [
    "E501",  # Line too long, handled by black
    # "B008",  # Do not perform function calls in argument defaults
    # "C901",  # Too complex
    "D107", # "Missing docstring in __init__",
]
extend-exclude = [
    "docs",
    "tests",
]

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "F401"]
# "path/to/file.py" = ["E402"]
# 'thesis_work/__init__.py' = ['F405', 'F403']

# [tool.ruff.flake8-quotes]
# inline-quotes = "single"
# multiline-quotes = "double"
# docstring-quotes = "double"

[tool.ruff.flake8-import-conventions.extend-aliases]
some_alias = ""

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
combine-as-imports = true
# force-wrap-aliases = true
# known-first-party = ["SomeLibrary"]
# known-third-party = ["SomeLibrary"]

# mypy section
# Read more here: https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
# python_version = "3.8"
files = ["thesis_work"]
# exclude = ['^tests/']
strict = true
show_error_codes = true
# ignore_missing_imports = true

# TODO: Check whether this is working
[[tool.mypy.overrides]]
module = "thesis_work.tests.*"
ignore_missing_imports = true
check_untyped_defs = true

[tool.coverage.run]
source = ['thesis_work']
branch = true
context = '${CONTEXT}'

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    '@overload',
]
# show_missing = True

# [tool.coverage.paths]
# source = [
#     'thesis_work/',
# ]

[tool.dagster]
module_name = "dagster_pipelines"

######### Local poetry.toml example ##############
# [virtualenvs]
# create = false

# [repositories]
# [repositories.private-pypi]
# url = "http://private-pypi/"
##################################################

[build-system]
requires = ["poetry-core==1.5.2"]
build-backend = "poetry.core.masonry.api"
